---
import { t } from "i18next";

import ToolPill from "./ToolPill.astro";
import WebIcon from "../atoms/WebIcon.astro";
import GithubIcon from "../atoms/GithubIcon.astro";
import type { TagData } from "@/utils/projects";
import { createSlug } from "@/utils/createSlug";

export interface Props {
  title: string;
  description: {
    firstParagraph: string;
    secondParagraph: string;
    thirdParagraph: string;
  };
  tags: TagData[];
  img: string;
  live_link: string;
  repo_link: string;
}

const { title, description, tags, img, live_link, repo_link } = Astro.props;
const { firstParagraph, secondParagraph, thirdParagraph } = description;
---

<li class="link-card">
  <div class="content">
    <header class="header">
      <h3 class="title">
        <a href=`/projects/${createSlug(title)}`>{title}</a>
      </h3>
      <div class="link-items">
        <WebIcon link={live_link} width="28" height="28" />
        <GithubIcon type="button" link={repo_link} width="28" height="28" />
      </div>
    </header>
    <p class="description">{t(firstParagraph)}</p>
    <ul class="tag-items">
      {
        tags.map(({ tagName, tagColor, tagIcon }) => (
          <ToolPill
            tagName={tagName}
            tagIcon={tagIcon}
            tagColor={tagColor as string}
          />
        ))
      }
    </ul>
  </div>
  <div class="thumbnail-wrapper">
    <img
      class="cover-thumbnail"
      src={img}
      alt={`Thumbnail of ${title}`}
      width="120"
      height="360"
      arial-label={`Thumbnail of ${title}`}
    />
  </div>
</li>

<style>
  .link-card {
    position: relative;
    display: flex;
    flex-direction: column-reverse;

    &::before {
      content: "";
      position: absolute;
      z-index: 1;
      width: 100%;
      height: 100%;
      border: 1px solid #dddddd15;
      border-radius: 0.77rem;
      background-color: #060912;
    }
    @media (min-width: 425px) {
      &::before {
        display: none;
      }
    }
    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      z-index: 2;
      width: 100%;
      height: 100%;
      border: 1px solid #dddddd15;
      border-radius: 0.77rem;
      background: linear-gradient(180deg, #090f1a 0%, transparent);
    }
    @media (prefers-color-scheme: light) {
      &::before {
        background-color: #e4ecf1;
      }
      &::after {
        background: linear-gradient(180deg, #e4ecf1 0%, transparent);
      }
    }

    @media (max-width: 1210px) {
      padding: 2rem;
      flex-direction: column-reverse;
      gap: 2rem;
    }
    @media screen and (width: 320px) {
      .link-card {
        padding: 1em;
      }
    }

    .content {
      display: flex;
      flex-direction: column;
      border-radius: 0.77rem;
      gap: 0.99rem;
      max-width: 25em;
      padding: 2em;
      z-index: 10;

      /* This value is used as the spread of the gradient */
      --spread: 1px;
      &::before {
        content: "";
        position: absolute;
        inset: calc(-1 * var(--spread));
        background: conic-gradient(
          from 90deg at 40% -25%,
          #43cc4a3a,
          #5997bb65
        );
        clip-path: polygon(
          -100vmax -100vmax,
          100vmax -100vmax,
          100vmax 100vmax,
          -100vmax 100vmax,
          -100vmax -100vmax,
          calc(0px + var(--spread)) calc(0px + var(--spread)),
          calc(0px + var(--spread)) calc(100% - var(--spread)),
          calc(100% - var(--spread)) calc(100% - var(--spread)),
          calc(100% - var(--spread)) calc(0px + var(--spread)),
          calc(0px + var(--spread)) calc(0px + var(--spread))
        );
        transform: translate3d(0, 0, -1px);
        filter: blur(10px);
      }
      @media (max-width: 425px) {
        &::before {
          background: none;
        }
      }
      @media screen and (width: 320px) {
        width: 100%;
      }

      .header {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 1em;

        .title {
          a {
            background-image: linear-gradient(
              to right,
              var(--blue-color),
              var(--secondary-color)
            );
            background-size: 0% 2px;
            background-position: 0 100%;
            background-repeat: no-repeat;
            transition: background-size 0.12s ease-in-out;
            color: var(--white-c-900);
            @media (prefers-color-scheme: light) {
              color: var(--black-color);
            }
            &:hover {
              background-size: 100% 2px;
            }
          }
        }

        .link-items {
          display: flex;
          gap: 0.5em;
        }
      }

      .description {
        font-size: 1.02rem;
        line-height: 1.6rem;
        margin: 0;
        color: var(--white-c-800);
        @media (prefers-color-scheme: light) {
          color: var(--primary-color);
        }
      }

      .tag-items {
        font-size: 0.7rem;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        color: var(--white-color);
      }
    }

    .thumbnail-wrapper {
      z-index: 10;
      width: 100%;

      .cover-thumbnail {
        width: 100%;
        border-top-right-radius: 0.77rem;
        border-top-left-radius: 0.77rem;
        object-position: top;
        object-fit: cover;
        transition:
          transform 0.23s ease-in-out,
          filter 0.23s ease-in-out;
      }
    }
  }
</style>
